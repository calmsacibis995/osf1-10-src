.\" This manpage source uses rsml coding. 
.so /usr/share/lib/tmac/sml
.so /usr/share/lib/tmac/rsml
.\"
.\"
.\" *********************************************************************
.\" *                                                                   *
.\" *      Copyright (c) Digital Equipment Corporation, 1991, 1994      *
.\" *                                                                   *
.\" *                       All Rights Reserved.                        *
.\" *                                                                   *
.\" *********************************************************************
.\"
.\"
.\" HISTORY
.\"
.\" @(#)$RCSfile: route.7,v $ $Revision: 3.2.2.3 $ (DEC) $Date: 1992/07/22 13:46:47 $
.\" 
...\" 
...\" (c) Copyright 1991, OPEN SOFTWARE FOUNDATION, INC.
...\" ALL RIGHTS RESERVED
...\" 
...\"
...\"
...\" Copyright (c) 1990 The Regents of the University of California.
...\" All rights reserved.
...\" 
...\" Redistribution and use in source and binary forms are permitted
...\" provided that: (1) source distributions retain this entire copyright
...\" notice and comment, and (2) distributions including binaries display
...\" the following acknowledgement:  ``This product includes software
...\" developed by the University of California, Berkeley and its contributors''
...\" in the documentation or other materials provided with the distribution
...\" and in all advertising materials mentioning features or use of this
...\" software. Neither the name of the University nor the names of its
...\" contributors may be used to endorse or promote products derived
...\" from this software without specific prior written permission.
...\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
...\" IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
...\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
...\" 
...\" @(#)route.4	6.2 (Berkeley) 5/30/90
...\" 
.TH route 7
.SH NAME
\*LROUTE\*O \- Kernel packet forwarding database
.iX "route database"
.iX "databases" "ROUTE"
.iX "kernel packet forwarding" "database"
.iX "packet forwarding database"
.SH SYNOPSIS 
.sS
\*L#include <sys/socket.h>
.nL
\*L#include <net/if.h>
.nL
\*L#include <net/route.h>
.nL
\*Lint \f2family\f1\*O
.nL
\*Ls = socket(PF_ROUTE, SOCK_RAW, \f2family\f3);\*O
.sE
.SH DESCRIPTION
.PP 
THe UNIX operating system
provides packet routing facilities.
The kernel maintains a routing information database, which
is used in selecting the appropriate network interface when
transmitting packets.
.PP 
A user process (or possibly multiple cooperating processes)
maintains this database by sending messages over a special kind
of socket.
Routing table changes may only be carried out by the superuser.
.PP 
The operating system may spontaneously emit routing messages in response
to external events, such as receipt of a redirect, or failure to
locate a suitable route for a request.
.PP 
Routing database entries are of two types: those for a specific
host, and those for all hosts on a generic subnetwork (as specified
by a bit mask and value under the mask).
The effect of a wildcard or default route may be achieved by using
a mask of all zeros.  There may be hierarchical routes.
.PP 
When the system is booted and addresses are assigned
to the network interfaces, each protocol family
installs a routing table entry for each interface when it is ready for traffic.
Normally the protocol specifies the route
through each interface as a ``direct'' connection to the destination host
or network.  If the route is direct, the transport layer of
a protocol family usually requests that the packet be sent to the
host specified in the packet.  Otherwise, the interface
is requested to address the packet to the gateway listed in the routing entry
(that is, the packet is forwarded).
.PP 
When routing a packet,
the kernel first attempts to find a route to the destination host.
Failing that, a search is made for a route to the network of the destination.
Finally, any route to a default (wildcard) gateway is chosen.
If no entry is found, the destination is declared to be unreachable,
and an error message is generated if there are any
listeners on the routing control socket described later in this section.
.PP 
A wildcard routing entry is specified with a zero
destination address value.  Wildcard routes are used
only when the system fails to find a route to the
destination host and network.  The combination of wildcard
routes and routing redirects can provide an economical
mechanism for routing traffic.
.PP 
To open the channel for passing routing control messages,
use the socket call shown in the \*LSYNOPSIS\*O section.
.PP 
The \*Vfamily\*O parameter may be AF_UNSPEC which will provide
routing information for all address families, or can be restricted
to a specific address family by specifying which one is desired.
There can be more than one routing socket open per system.
.PP 
Messages are formed by a header followed by a small
number of sockaddrs (now variable length), interpreted by position, and delimited
by the new length entry in the sockaddr.
An example of a message with four addresses might be an ISO redirect:
destination, netmask, gateway, and author of the redirect.
The interpretation of which addresses are present is given by a
bit mask within the header, and the sequence is least significant
to most significant bit within the vector.
.PP 
Any messages sent to the kernel are returned, and copies are sent
to all interested listeners.  The kernel will provide the process
ID for the sender, and the sender may use an additional sequence
field to distinguish between outstanding messages.  However,
message replies may be lost when kernel buffers are exhausted.
.PP 
The kernel may reject certain messages, and will indicate this
by filling in the
\*Lrtm_errno\*O
field.
In the current implementation, all routing process run locally,
and the values for
\*Lrtm_errno\*O
are available through the normal
errno mechanism, even if the routing reply message is lost.
.PP 
A process may avoid the expense of reading replies to
its own messages by issuing a
\*Lsetsockopt(\|)\*O
call indicating that the SO_USELOOPBACK option
at the SOL_SOCKET level is to be turned off.
A process may ignore all messages from the routing socket
by shutting down further input with the
\*Lshutdown(\|)\*O
function.
.PP 
If a route is in use when it is deleted,
the routing entry will be marked down and removed from the routing table,
but the resources associated with it will not
be reclaimed until all references to it are released.
User processes can obtain information about the routing
entry to a specific destination by using a RTM_GET message,
or by reading the
\*L/dev/kmem\*O
device.
.SH ERRORS
.PP 
If messages are rejected,
\*Lrtm_errno\*O
may be set to one of the following values:
...\"from TP 1i"  
.VL 1i
.LI "[EEXIST]"
The entry to be created already exists.
...\"from TP 1i"  
.LI "[ESRCH]" 
The entry to be deleted does not exist.
...\"from TP 1i"  
.LI "[ENOBUFS]" 
Insufficient resources were available
to install a new route.
.iX "route database"
.LE 
.EQ
delim off
.EN
